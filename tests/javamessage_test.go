package tests

import (
	"encoding/base64"
	"errors"
	"fmt"
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/vogo/gohessian"
)

// reference java class: github.com/vogo/gohessian/tests/jobj/Message.java

type TraceVo struct {
	Key   string
	Value string
}

type TraceData struct {
	Seq  int
	Data TraceVo
}

type Message struct {
	Title string
	Msg   []TraceData
}

var javaMessageHessianTypeMap map[string]reflect.Type
var javaMessageHessianNameMap map[string]string

func init() {
	vo := TraceVo{}
	data := TraceData{}
	message := Message{}

	messageType := reflect.TypeOf(message)
	traceDataType := reflect.TypeOf(data)
	traceVoType := reflect.TypeOf(vo)

	javaMessageHessianTypeMap = hessian.TypeMapOf(messageType)
	javaMessageHessianTypeMap["tests.jobj.Message"] = messageType
	javaMessageHessianTypeMap["tests.jobj.TraceData"] = traceDataType
	javaMessageHessianTypeMap["tests.jobj.TraceVo"] = traceVoType

	javaMessageHessianNameMap = make(map[string]string)
	javaMessageHessianNameMap[messageType.Name()] = "tests.jobj.Message"
	javaMessageHessianNameMap[traceDataType.Name()] = "tests.jobj.TraceData"
	javaMessageHessianNameMap[traceVoType.Name()] = "tests.jobj.TraceVo"
}

func decodeJavaMessage(data []byte) (msg *Message, err error) {
	if data == nil || len(data) == 0 {
		return nil, errors.New("nil byte")
	}
	res, err := hessian.ToObject(data, javaMessageHessianTypeMap)
	if err != nil {
		fmt.Println("failed decode bytes:", base64.StdEncoding.EncodeToString(data))
		return nil, err
	}
	if sn, ok := res.(*Message); ok {
		msg = sn
		return
	}
	err = errors.New("failed to decode Servermsg")
	return
}

func encodeJavaMessage(msg *Message) ([]byte, error) {
	return hessian.ToBytes(*msg, javaMessageHessianNameMap)
}

func TestJavaMessageEncode(t *testing.T) {
	msg := &Message{
		Title: "t1",
		Msg: []TraceData{
			{
				Seq:  111,
				Data: TraceVo{"k1", "v1"},
			},
			{
				Seq:  112,
				Data: TraceVo{"k2", "v2"},
			},
			{
				Seq:  113,
				Data: TraceVo{"k3", "v3"},
			},
		},
	}

	bt, err := encodeJavaMessage(msg)
	if err != nil {
		t.Error(err)
		t.Fail()
	}

	t.Log(base64.StdEncoding.EncodeToString(bt))
	t.Log(string(bt))
	decodeMsg, err := decodeJavaMessage(bt)
	if err != nil {
		t.Error(err)
		t.Fail()
	}

	t.Log(decodeMsg)
	assert.Equal(t, msg.Title, decodeMsg.Title)
	assert.Equal(t, len(msg.Msg), len(decodeMsg.Msg))

}

func TestJavaMessageDecode(t *testing.T) {
	// NOTE: the following base64 string is generated by github.com/vogo/gohessian/tests/jobj/Message.java
	b64 := "QxJ0ZXN0cy5qb2JqLk1lc3NhZ2WSBXRpdGxlA21zZ2ACbTF6QxR0ZXN0cy5qb2JqLlRyYWNlRGF0YZIDc2VxBGRhdGFh1eJAQxJ0ZXN0cy5qb2JqLlRyYWNlVm+SA2tleQV2YWx1ZWICazECdjFh1eJBYgJrMgJ2Mg=="
	bytes, err := base64.StdEncoding.DecodeString(b64)
	assert.Nil(t, err)

	t.Log(string(bytes))
	msg, err := decodeJavaMessage(bytes)
	assert.Nil(t, err)

	t.Log(msg)
}
