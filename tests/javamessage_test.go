package tests

import (
	"encoding/base64"
	"errors"
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/vogo/gohessian"
)

type TraceVo struct {
	Key   string
	Value string
}

//HessianCodecName for struct
func (TraceVo) HessianCodecName() string {
	return "hessian.TraceVo"
}

type TraceData struct {
	Seq  int
	Data TraceVo
}

//HessianCodecName for struct
func (TraceData) HessianCodecName() string {
	return "hessian.TraceData"
}

// ref java class: github.com/vogo/gohessian/tests/java-tests/src/main/java/hessian/Message.java
type Message struct {
	Title string
	Msg   []TraceData
}

//HessianCodecName for struct
func (Message) HessianCodecName() string {
	return "hessian.Message"
}

func decodeJavaMessage(t *testing.T, data []byte, typMap map[string]reflect.Type) (msg *Message, err error) {
	if data == nil || len(data) == 0 {
		return nil, errors.New("nil byte")
	}
	res, err := hessian.ToObject(data, typMap)
	if err != nil {
		t.Log("failed decode bytes:", base64.StdEncoding.EncodeToString(data))
		return nil, err
	}
	if sn, ok := res.(*Message); ok {
		msg = sn
		return
	}
	err = errors.New("failed to decode")
	return
}

func encodeJavaMessage(t *testing.T, msg *Message, nameMap map[string]string) ([]byte, error) {
	return hessian.ToBytes(*msg, nameMap)
}

func TestJavaMessageEncode(t *testing.T) {
	typeMap, nameMap := hessian.ExtractTypeNameMap(Message{})
	t.Log(typeMap)
	t.Log(nameMap)

	msg := &Message{
		Title: "t1",
		Msg: []TraceData{
			{
				Seq:  111,
				Data: TraceVo{"k1", "v1"},
			},
			{
				Seq:  112,
				Data: TraceVo{"k2", "v2"},
			},
			{
				Seq:  113,
				Data: TraceVo{"k3", "v3"},
			},
		},
	}

	bt, err := encodeJavaMessage(t, msg, nameMap)
	if err != nil {
		t.Error(err)
		t.Fail()
	}

	t.Log(base64.StdEncoding.EncodeToString(bt))
	t.Log(string(bt))
	decodeMsg, err := decodeJavaMessage(t, bt, typeMap)
	if err != nil {
		t.Error(err)
		t.Fail()
	}

	t.Log(decodeMsg)
	assert.Equal(t, msg.Title, decodeMsg.Title)
	assert.Equal(t, len(msg.Msg), len(decodeMsg.Msg))

}

func TestJavaMessageDecode(t *testing.T) {
	// NOTE: the following base64 string is generated by github.com/vogo/gohessian/tests/java-tests/src/test/java/hessian/MessageTest.java
	b64 := "Qw9oZXNzaWFuLk1lc3NhZ2WSBXRpdGxlA21zZ2ACbTF6QxFoZXNzaWFuLlRyYWNlRGF0YZIDc2VxBGRhdGFh1eJAQw9oZXNzaWFuLlRyYWNlVm+SA2tleQV2YWx1ZWICazECdjFh1eJBYgJrMgJ2Mg=="
	bytes, err := base64.StdEncoding.DecodeString(b64)
	t.Log(string(b64))
	assert.Nil(t, err)

	javaMessage := Message{}
	typeMap := hessian.TypeMapFrom(javaMessage)

	t.Log(string(bytes))
	msg, err := decodeJavaMessage(t, bytes, typeMap)
	assert.Nil(t, err)

	t.Log(msg)
}
